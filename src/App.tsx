import React, { useState, useEffect } from 'react'
import FlashCard, { Fact } from './components/FlashCard.tsx'
import InputAndKeypad from './components/InputAndKeypad'
import Summary from './components/Summary.tsx'
import { randomFact } from './utils/facts.ts'
import { loadFacts, saveFacts, initializeSupabaseFactsData, checkSupabaseConnection, startTraining, addFactToCurrentTraining, finishTraining } from './services/storage'
import { initializeSession } from './services/supabase'
import dragonPic from '../Pics/Dragon 1.png'

const TARGET_SCORE = 300 // –º–æ–∂–µ—à –¥–∞ —Å–º–µ–Ω–∏—à –ø–æ –∂–µ–ª–∞–Ω–∏–µ
const POINT_CORRECT = 10
const POINT_WRONG = -5

import PuzzleSVG from './components/PuzzleSVG';
import Dashboard from './components/Dashboard';
import HomeScreen from './components/HomeScreen';
import Album from './components/Album';

type Screen = 'home' | 'game' | 'dashboard' | 'album';

export default function App() {
  const [screen, setScreen] = useState<Screen>('home');
  const [score, setScore] = useState(0)
  const [fact, setFact] = useState<Fact>(() => randomFact())
  const prevFactRef = React.useRef<Fact | null>(null);
  const [isFinished, setFinished] = useState(false)
  const [paused, setPaused] = useState(false)
  const [lastCorrect, setLastCorrect] = useState(null)
  const [puzzleRevealedCount, setPuzzleRevealedCount] = useState(0);
  const progressRef = React.useRef<HTMLDivElement>(null);
  const [progressWidth, setProgressWidth] = React.useState(0);
  React.useEffect(() => {
    if (progressRef.current) {
      setProgressWidth(progressRef.current.offsetWidth);
    }
    const handleResize = () => {
      if (progressRef.current) setProgressWidth(progressRef.current.offsetWidth);
    };
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ Supabase –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ
    const initializeApp = async () => {
      startTraining(); // —Å—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –ø—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ
      try {
        // –ü—ä—Ä–≤–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ —Å–µ—Å–∏—è—Ç–∞ - –≤–ª–∏–∑–∞–º–µ —Å —Ñ–∏–∫—Å–∏—Ä–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª
        const isAuthenticated = await initializeSession();
        if (!isAuthenticated) {
          console.warn('–ù–µ –º–æ–∂–µ –¥–∞ —Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∞ —Å–µ—Å–∏—è, –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º');
        }
        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –º–æ–∂–µ–º –¥–∞ —Å–µ —Å–≤—ä—Ä–∂–µ–º —Å—ä—Å Supabase
        const isConnected = await checkSupabaseConnection();
        if (isConnected) {
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ —Ñ–∞–∫—Ç–∏—Ç–µ –≤ –±–∞–∑–∞—Ç–∞ (–∞–∫–æ –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç, –Ω—è–º–∞ –¥–∞ —Å–µ –ø—Ä–æ–º–µ–Ω—è—Ç)
          await initializeSupabaseFactsData();
        } else {
          console.log('–ù—è–º–∞ –≤—Ä—ä–∑–∫–∞ —Å—ä—Å Supabase, —Ä–∞–±–æ—Ç–∏–º —Å–∞–º–æ —Å localStorage');
        }
      } catch (error) {
        console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ:', error);
      }
      // –ó–∞—Ä–µ–∂–¥–∞–º–µ —Ñ–∞–∫—Ç–∏—Ç–µ –æ—Ç localStorage –∫–∞–∫—Ç–æ –ø—Ä–µ–¥–∏
      loadFacts();
    };
    initializeApp();
  }, [])

  const handleSubmit = (ok, duration, timedOut) => {
    setLastCorrect(ok);
    if (timedOut) {
      setPaused(true);
      return;
    }
    // –î–æ–±–∞–≤–∏ –æ—Ç–≥–æ–≤–æ—Ä–∞ –∫—ä–º —Ç–µ–∫—É—â–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–∞–º–æ –∞–∫–æ timedOut –µ false
    // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ç–µ–∫—É—â–∞—Ç–∞ —Ç—Ä—É–¥–Ω–æ—Å—Ç –Ω–∞ —Ñ–∞–∫—Ç–∞
    const allFactsLocal = loadFacts();
    const existingFact = allFactsLocal.find(f2 => f2.i === fact.i && f2.j === fact.j);
    const currentDifficulty = existingFact?.difficultyRating ?? 5.0;
    addFactToCurrentTraining({
      fact: {
        i: fact.i,
        j: fact.j,
        correctCount: 0,
        wrongCount: 0,
        streak: 0,
        avgTime: 0,
        attempts: 0,
        box: 1,
        lastPracticed: new Date().toISOString(),
        nextPractice: new Date().toISOString(),
        difficultyRating: currentDifficulty
      },
      isCorrect: ok,
      responseTime: duration
    });
    setPuzzleRevealedCount(prev => ok ? Math.min(prev + 2, 60) : Math.max(prev - 1, 0));
    const next = score + (ok ? POINT_CORRECT : POINT_WRONG);
    setScore(next);
    if (next >= TARGET_SCORE) {
      setFinished(true);
      finishTraining();
    }
    setFact(randomFact(prevFactRef.current));
    prevFactRef.current = fact;
  }

  const restart = () => {
    setScore(0)
    setFact(randomFact())
    setFinished(false)
    setScreen('home'); // –ü—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç —Å–µ –≤—Ä—ä—â–∞–º–µ –Ω–∞ –Ω–∞—á–∞–ª–Ω–∏—è –µ–∫—Ä–∞–Ω
    startTraining(); // –ü—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç –∑–∞–ø–æ—á–Ω–∏ –Ω–æ–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
  }

  if (screen === 'home') {
    return (
      <HomeScreen
        onPlay={() => {
          setScreen('game');
          setFinished(false);
          setScore(0);
          setPuzzleRevealedCount(0);
          setLastCorrect(null);
          prevFactRef.current = null;
          setFact(randomFact());
          startTraining();
          setTimeout(() => {
            if (progressRef.current) setProgressWidth(progressRef.current.offsetWidth);
          }, 0);
        }}
        onAchievements={() => setScreen('dashboard')}
        onAlbum={() => setScreen('album')}
      />
    );
  }
  if (screen === 'dashboard') {
    return <Dashboard onClose={() => setScreen('home')} />
  }
  if (screen === 'album') {
    return <Album onClose={() => setScreen('home')} />
  }
  
  if (paused) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center gap-6">
        <div className="text-2xl">–í—Ä–µ–º–µ—Ç–æ –∏–∑—Ç–µ—á–µ!</div>
        <div className="flex gap-4">
          <button onClick={() => { setPaused(false); setFact(randomFact(prevFactRef.current)); prevFactRef.current = fact; }} className="bg-blue-500 text-white px-4 py-2 rounded">
            –ü—Ä–æ–¥—ä–ª–∂–∏
          </button>
          <button onClick={() => { setPaused(false); setFinished(true); finishTraining(); }} className="bg-red-500 text-white px-4 py-2 rounded">
            –ö—Ä–∞–π –Ω–∞ –∏–≥—Ä–∞—Ç–∞
          </button>
        </div>
      </div>
    )
  }
  if (isFinished) return <Summary score={score} onRestart={restart} />

  return (
    <div className="app-wrapper">
      {/* –†–æ–¥–∏—Ç–µ–ª—Å–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ–Ω –±—É—Ç–æ–Ω */}
      <button 
        onClick={() => setShowDashboard(true)}
        className="absolute top-4 right-4 z-50 px-3 py-2 bg-purple-600 text-white rounded-full hover:bg-purple-700 focus:outline-none flex items-center justify-center shadow-lg"
        title="–†–æ–¥–∏—Ç–µ–ª—Å–∫–∏ –¥–∞—à–±–æ—Ä–¥"
      >
        <span className="text-xl">üìä</span>
      </button>
      
      {/* progress bar */}
      <div className="progress-container" ref={progressRef} style={{position:'relative'}}>
        <div
          className="progress-bar"
          style={{ 
            width: `${Math.min((score / TARGET_SCORE) * 100, 100)}%`,
            background: lastCorrect === null
              ? 'linear-gradient(to right, #3b82f6, #60a5fa)'
              : lastCorrect
                ? 'linear-gradient(to right, #3b82f6, #60a5fa)'
                : 'linear-gradient(to right, #f97316, #fb923c)'
          }}
        />
        <span className="progress-text">
          {Math.round((score / TARGET_SCORE) * 100)}%
        </span>
        {/* Emoji indicator - –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–ø—Ä—è–º–æ progress-container */}
        <span
          className="progress-emoji"
          style={{
            position: 'absolute',
            left: progressWidth
              ? `calc(${Math.max(0, Math.min((score / TARGET_SCORE), 1)) * progressWidth}px)`
              : '0px',
            top: '50%',
            transform: 'translate(-50%,-50%)',
            fontSize: '4.0rem',
            pointerEvents: 'none',
            zIndex: 20,
            transition: 'left 0.5s cubic-bezier(.4,0,.2,1)'
          }}
        >
          {lastCorrect === null ? '' : lastCorrect ? 'üòú' : 'üòí'}
        </span>
      </div>

      {/* three-panel layout, —Ç–æ—á–Ω–æ –∫–∞—Ç–æ –≤ mockup Grisho.html */}
      <div className="main-content">
        {/* –õ—è–≤ –ø–∞–Ω–µ–ª - –ø—ä–∑–µ–ª */}
        <div className="left-panel">
          <div className="puzzle-placeholder">
            {/* –¢—É–∫ —â–µ —Å–ª–æ–∂–∏–º canvas –∏–ª–∏ SVG –∑–∞ –ø—ä–∑–µ–ª–∞ –≤ –±—ä–¥–µ—â–µ */}
          </div>
          <PuzzleSVG revealedCount={puzzleRevealedCount} />
        </div>
        {/* –¶–µ–Ω—Ç—Ä–∞–ª–µ–Ω –ø–∞–Ω–µ–ª - —Å–∞–º–æ –∑–∞–¥–∞—á–∞—Ç–∞ */}
        <div className="flash-card-panel">
          <div className="problem" id="problem">
            {fact.i} √ó {fact.j}
          </div>
        </div>
        {/* –î–µ—Å–µ–Ω –ø–∞–Ω–µ–ª - input –∏ keypad */}
        <div className="right-panel flex flex-col items-center gap-4">
          <InputAndKeypad onSubmit={handleSubmit} correctAnswer={fact.i * fact.j} fact={fact} />
        </div>
      </div>
    </div>
  )
}
